pipeline {
    agent any

    tools {
        // Specify the version of JDK and Maven you have configured in Jenkins Global Tool Configuration
        maven 'Maven3'
        jdk 'JDK11'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout from version control
                checkout scm
            }
        }
stage('SonarQube analysis') {
    steps {
        withSonarQubeEnv('YourSonarQubeServerName') {
            sh 'mvn clean verify sonar:sonar'
        }
    }
}



        stage('Build') {
            steps {
                // Build your project and execute unit tests
                sh 'mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            steps {
                // Run static code analysis with SonarQube
                sh 'mvn sonar:sonar'
            }
        }

        stage('Code Coverage') {
            steps {
                // Generate code coverage report
                // This assumes JaCoCo plugin is configured in your Maven pom.xml
                sh 'mvn jacoco:report'
            }
        }

        stage('Archive Artifacts') {
            steps {
                // Archive the JAR file generated by Maven package
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
    }

    post {
        always {
            // Publish JUnit test results
            junit '**/target/surefire-reports/*.xml'

            // Publish JaCoCo code coverage report
            jacoco execPattern: '**/target/jacoco.exec'

            // Add steps for SonarQube quality gate check if needed
        }

        success {
            // Notify on success (e.g., Slack, Email)
            // Slack example:
            // slackSend(channel: '#your-channel', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'")
        }

        failure {
            // Notify on failure (e.g., Slack, Email)
            // Slack example:
            // slackSend(channel: '#your-channel', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'")
        }
    }
}
